mdp

const int GMAX = 5;
const int XINIT = 3;
const int YINIT = 1;

const int TO_COLLECT=5;
const int GOLD_TO_COLLECT=TO_COLLECT; // Set to 0 to avoid unfolding
const int GEM_TO_COLLECT=TO_COLLECT; // Set to 0 to avoid unfolding

const double pAttack = 1/10;

formula x_gold = 3;
formula y_gold = 5;
formula left_of_gold  = x+1=x_gold & y=y_gold;
formula right_of_gold = x-1=x_gold & y=y_gold;
formula below_of_gold = x=x_gold & y+1=y_gold;
formula above_of_gold = x=x_gold & y-1=y_gold;

formula x_gem = 5;
formula y_gem = 4;
formula left_of_gem  = x+1=x_gem & y=y_gem;
formula right_of_gem = x-1=x_gem & y=y_gem;
formula below_of_gem = x=x_gem & y+1=y_gem;
formula above_of_gem = x=x_gem & y-1=y_gem;

formula x_home = 3;
formula y_home = 1;
formula left_of_home  = x+1=x_home & y=y_home;
formula right_of_home = x-1=x_home & y=y_home;
formula below_of_home = x=x_home & y+1=y_home;
formula above_of_home = x=x_home & y-1=y_home;

formula x_enemy_1 = 4;
formula y_enemy_1 = 5;
formula left_of_enemy_1  = x+1=x_enemy_1 & y=y_enemy_1;
formula right_of_enemy_1 = x-1=x_enemy_1 & y=y_enemy_1;
formula below_of_enemy_1 = x=x_enemy_1 & y+1=y_enemy_1;
formula above_of_enemy_1 = x=x_enemy_1 & y-1=y_enemy_1;

formula x_enemy_2 = 3;
formula y_enemy_2 = 4;
formula left_of_enemy_2  = x+1=x_enemy_2 & y=y_enemy_2;
formula right_of_enemy_2 = x-1=x_enemy_2 & y=y_enemy_2;
formula below_of_enemy_2 = x=x_enemy_2 & y+1=y_enemy_2;
formula above_of_enemy_2 = x=x_enemy_2 & y-1=y_enemy_2;

formula left_of_enemy = left_of_enemy_1 | left_of_enemy_2;
formula right_of_enemy = right_of_enemy_1 | right_of_enemy_2;
formula above_of_enemy = above_of_enemy_1 | above_of_enemy_2;
formula below_of_enemy = below_of_enemy_1 | below_of_enemy_2;


module robot

	gold : bool init false;
	gem : bool init false;
	attacked : bool init false;

	x : [1..GMAX] init XINIT;
	y : [1..GMAX] init YINIT;

	[right] !left_of_enemy & x<GMAX ->  (attacked'=false) & (x'=x+1) & (gold' = (gold & !left_of_home) | left_of_gold)   &  (gem' =  (gem & !left_of_home) | left_of_gem);
	[left] !right_of_enemy & x>1 ->      (attacked'=false) & (x'=x-1) & (gold' = (gold & !right_of_home) | right_of_gold) & (gem' =  (gem & !right_of_home) | right_of_gem);
	[top] !below_of_enemy & y<GMAX ->  (attacked'=false) & (y'=y+1) & (gold' = (gold & !below_of_home) | below_of_gold) & (gem' =  (gem & !below_of_home) | below_of_gem);
	[down] !above_of_enemy & y>1 ->      (attacked'=false) & (y'=y-1) & (gold' = (gold & !above_of_home) | above_of_gold) & (gem' =  (gem & !above_of_home) | above_of_gem);

	[right] left_of_enemy & x<GMAX -> pAttack : (attacked'=true) & (x'=XINIT) & (y'=YINIT) & (gold'=false) & (gem'=false) + (1-pAttack) : (attacked'=false) & (x'=x+1) & (gold' = (gold & !left_of_home) | left_of_gold) & (gem' =  (gem & !left_of_home) | left_of_gem);
	[left] right_of_enemy & x>1 ->     pAttack : (attacked'=true) & (x'=XINIT) & (y'=YINIT) & (gold'=false) & (gem'=false) + (1-pAttack) : (attacked'=false) & (x'=x-1) & (gold' = (gold & !right_of_home) | right_of_gold) & (gem' =  (gem & !right_of_home) | right_of_gem);
	[top] below_of_enemy & y<GMAX -> pAttack : (attacked'=true) & (x'=XINIT) & (y'=YINIT) & (gold'=false) & (gem'=false) + (1-pAttack) : (attacked'=false) & (y'=y+1) & (gold' = (gold & !below_of_home) | below_of_gold) & (gem' =  (gem & !below_of_home) | below_of_gem);
	[down] above_of_enemy & y>1 ->     pAttack : (attacked'=true) & (x'=XINIT) & (y'=YINIT) & (gold'=false) & (gem'=false) + (1-pAttack) : (attacked'=false) & (y'=y-1) & (gold' = (gold & !above_of_home) | above_of_gold) & (gem' =  (gem & !above_of_home) | above_of_gem);
endmodule

// rewards "attacks"
//  attacked : 1;
// endrewards

// rewards "rew_gold"
// 	[right] left_of_home & gold : 1;
// 	[left] right_of_home & gold : 1;
// 	[top] below_of_home & gold : 1;
// 	[down] above_of_home & gold : 1;
// endrewards

// rewards "rew_gem"
// 	[right] left_of_home & gem : 1;
// 	[left] right_of_home & gem : 1;
// 	[top] below_of_home & gem : 1;
// 	[down] above_of_home & gem: 1;
// endrewards

module goldcounter

	required_gold : [0..GOLD_TO_COLLECT] init GOLD_TO_COLLECT;
	
	[right] true -> (required_gold'=max(0, required_gold - (left_of_home & gold  ? 1 : 0)));
	[left]  true -> (required_gold'=max(0, required_gold - (right_of_home & gold ? 1 : 0)));
	[top]   true -> (required_gold'=max(0, required_gold - (below_of_home & gold ? 1 : 0)));
	[down]  true -> (required_gold'=max(0, required_gold - (above_of_home & gold ? 1 : 0)));
endmodule

module gemcounter

	required_gem : [0..GEM_TO_COLLECT] init GEM_TO_COLLECT;

	[right] true -> (required_gem'=max(0, required_gem - (left_of_home & gem  ? 1 : 0)));
	[left]  true -> (required_gem'=max(0, required_gem - (right_of_home & gem ? 1 : 0)));
	[top]   true -> (required_gem'=max(0, required_gem - (below_of_home & gem ? 1 : 0)));
	[down]  true -> (required_gem'=max(0, required_gem - (above_of_home & gem ? 1 : 0)));
endmodule

label "goal" = required_gold=0 & required_gem=0;

rewards "steps"
	[right] true: 1;
	[left] true: 1;
	[top] true: 1;
	[down] true: 1;
endrewards
